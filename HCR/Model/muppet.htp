#if !defined(_muppet_)
#  define _muppet_

class model_data : public ad_comm{
  int debug_input_flag;
  init_adstring catchfilename;
  init_adstring totalcatchfilename;
  init_adstring catchresidualfilename;
  data_int INITCOND;
  data_int BackWards;
  data_int firstyear;
  data_int lastoptyear;
  data_int nsimuyears;
  data_int lastdatayear;
  data_int firstage;
  data_int lastdataage;
  data_int lastage;
  data_int firstcatchage;
  data_int minssbage;
  data_int plusgroup;
  data_int recrdatadelay;
  data_int nfixedselages;
  data_int estMlastagephase;
  int noptyears;
  int nyears;
  int lastyear;
  int nages;
  init_adstring stockparametersfilename;
  init_adstring catchparametersfilename;
  init_adstring likelihoodparametersfilename;
  init_adstring outputparametersfilename;
  data_int nsurveys;
  ivector surveyfirstyear;
  ivector surveylastyear;
  ivector surveyfirstage;
  ivector surveylastage;
  ivector surveyfirstagewithconstantcatchability;
  ivector surveyfirstagewithfullcatchability;
  ivector surveytimefromlastyear;
  ivector surveytype;
  ivector surveyweightsgiven;
  ivector surveycorrphase;
  ivector surveylogitphase;
  int minsurveyfirstage;
  int maxsurveyfirstagewithfullcatchability;
  int maxsurveyfirstagewithconstantcatchability;
  int COUNTER;
  data_int SSBRectype;
  data_vector SSBRecParameters;
  data_vector SSBRecSwitches;
  data_int MigrationNumbers;
  init_adstring PrognosisFilename;
  init_adstring WeightAndMaturityDatafilename;
  data_int number_of_seperable_periods;
  data_int prodchangeyear;
  init_adstring OptimDatafilename;
  data_vector logSSBRecLowerbounds;
  data_vector logSSBRecUpperbounds;
  data_number logminssbsurveyCV;
  data_number logminsurCV;
  data_int surveylnqphase;
  data_int surveypowphase;
  data_ivector surveybiopowphase;
  data_int estselphase;
  data_int catchlogitphase;
  data_int catchlogitsizephase;
  data_int misreportingphase;
  data_int Mmultphase;
  int LastMisReportingYear;
  double CatchRule;
  double weightcv;
  double weightcorr;
  double Assessmentcv;
  double Assessmentcorr;
  double Assessmentbias;
  double Implementationcv;
  double Implementationcorr;
  double Implementationbias;
  double CurrentAssessmentErrmultiplier;
  double CurrentStockScaler;
  double Recrcorr;
  double Btrigger;
  double EstimatedAssYrSSB;
  double Maxchange;
  double AssessmentErrorRat;
  int nprogselyears;
  int nweightandmaturityselyears;
  int IceFishYear;
  int DensDep;
  int HCRrefAge;
  int nweighterryears;
  double HCRreflebreak;
  int HCRBproxyAge;
  int AgeModel;
  double MaxHarvestRatio;
  double HarvestRatio;
  double CurrentTacInput;
  double TacLeftInput;
  double NextYearsTacInput;
  double LastYearsTacRatio;
  dvector FutureForCatch;
  ivector RefBiominage;
  int Frefage1;
  int Frefage2;
  int WeightedF;
  int printPhase;
  ivector mcallwriteswitch;
  ivector mcwriteswitch;
  ivector MigrationAges;
  ivector MigrationYears;
  int CatchRobust;
  int SurveyRobust;
  int likelihood_mcmc_lines;
  int migration_mcmc_lines;
  int recruitment_mcmc_lines;
  int initpopulation_mcmc_lines;
  int estimatedselection_mcmc_lines;
  int parameter_mcmc_lines;
  int surveypower_mcmc_lines;
  int surveyq_mcmc_lines;
  int effort_mcmc_lines;
  int catch_mcmc_lines;
  int fishyearcatch_mcmc_lines;
  int assessmenterror_mcmc_lines;
  int implementationerror_mcmc_lines;
  int refbio2_mcmc_lines;
  int refbio1_mcmc_lines;
  int hcrrefbio_mcmc_lines;
  int hcrbproxy_mcmc_lines;
  int n3_mcmc_lines;
  int n1st_mcmc_lines;
  int f_mcmc_lines;
  int ssb_mcmc_lines;
  int relssb_mcmc_lines;
  int ssbwerr_mcmc_lines;
  int mcmc_iteration;
  ivector parcolnr;
  int catagephase1;
  int catagephase2;
  int catagephase3;
  int catagephase4;
  int vpaphase1;
  int vpaphase2;
  int vpaphase3;
  int firstestage;
  int AgeCbioR;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  virtual void * mycast(void) {return (void*)this;}
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_number logMisreportingRatio;
  param_init_bounded_number logFoldestmult;
  param_init_bounded_number logMoldest;
  param_init_bounded_number logMmultiplier;
  param_init_bounded_vector lnMigrationAbundance;
  param_init_bounded_number lnMeanRecr;
  param_init_bounded_dev_vector lnRecr;
  param_init_bounded_number lnMeanInitialpop;
  param_init_bounded_dev_vector lnInitialpop;
  param_init_bounded_matrix EstimatedSelection;
  param_init_bounded_number Catchlogitslope;
  param_init_bounded_number Catchlogitage50;
  param_init_bounded_number selslope;
  param_init_bounded_number fullselwt;
  param_vector weighterr;
  param_vector recrweighterr;
  param_vector catchweighterr;
  param_vector selerr;
  param_init_bounded_number logSigmaCmultiplier;
  param_init_bounded_number AbundanceMultiplier;
  param_init_bounded_number lnMeanEffort;
  param_init_bounded_dev_vector lnEffort;
  param_init_bounded_number meanlogSurvivors;
  param_init_bounded_dev_vector logSurvivors;
  param_vector Surveylikelihood;
  param_vector SurveylikelihoodWeights;
  param_init_bounded_matrix SurveyPowerest;
  param_init_bounded_number_vector surveybiopow;
  param_init_bounded_vector SigmaSurveypar;
  param_init_bounded_matrix SurveylnQest;
  param_init_bounded_vector surveylogitslope;
  param_init_bounded_vector surveylogitage50;
  param_init_bounded_number_vector Surveycorr;
  param_init_bounded_matrix logSigmaSurvey;
  param_init_bounded_vector logSigmaSurveybio;
  param_init_bounded_number_vector estSSBRecParameters;
  param_number firsttime;
  param_matrix ObsCatchInNumbers;
  param_matrix ObsCatchInNumbersInput;
  param_matrix CatchDiff;
  param_matrix CatchWeightsData;
  param_matrix StockWeightsData;
  param_matrix SSBWeightsData;
  param_matrix StockMaturityData;
  param_matrix CatchWeights;
  param_matrix StockWeights;
  param_matrix SSBWeights;
  param_matrix StockMaturity;
  param_matrix N;
  param_matrix Nhat;
  param_matrix F;
  param_matrix natM;
  param_matrix Z;
  param_matrix PropInCatch;
  param_vector TotalCalcCatchInNumbers;
  param_vector CalcCatchIn1000tons;
  param_vector TotCatchIn1000tons;
  param_vector CatchIn1000tons;
  param_vector CatchIn1000tonsInput;
  param_vector FishingYearCatch;
  param_matrix CalcCatchInNumbers;
  param_vector meansel;
  param_vector progsel;
  param_vector ProgF;
  param_vector SigmaC;
  param_vector SigmaCinp;
  param_vector Mdata;
  param_vector PredictedRecruitment;
  param_vector Recruitment;
  param_vector RecruitmentResiduals;
  param_vector Misreporting;
  param_matrix Foldestinp;
  param_matrix Noldestinp;
  param_vector RefBio1;
  param_vector RefBio2;
  param_vector HCRrefbio;
  param_vector HCRBproxy;
  param_vector N3;
  param_vector N1st;
  param_vector CbioR;
  param_vector Totbio;
  param_vector PredRefF;
  param_vector PredSpawningstock;
  param_vector PredN;
  param_vector Survivors;
  param_number CbioRreflebreak;
  param_stddev_vector RefF;
  param_stddev_vector Spawningstock;
  param_vector SpawningstockWithErr;
  param_stddev_vector RelSpawningstock;
  param_vector SigmaSSBRec;
  param_vector EggProduction;
  param_vector TimeDrift;
  param_vector SurveyPropOfF;
  param_vector SurveyPropOfM;
  param_matrix SurveyResolution;
  param_matrix SigmaSurveyInp;
  param_matrix SigmaSurvey;
  param_matrix SurveylnQ;
  param_matrix SurveyPower;
  param_3array ObsSurveyNr;
  param_3array CalcSurveyNr;
  param_3array SurveyResiduals;
  param_3array SurveyWeights;
  param_3array CalcSurveyBiomassProportion;
  param_3array ObsSurveyBiomassProportion;
  param_matrix SurveylnYeareffect;
  param_matrix ObsSurveyBiomass;
  param_matrix ObsSurveyTotnr;
  param_matrix CalcSurveyBiomass;
  param_matrix CalcSurveyTotnr;
  param_vector PropofFbeforeSpawning;
  param_vector PropofMbeforeSpawning;
  param_number RefSSB;
  param_number Minrelssb;
  param_number Maxrelssb;
  param_number CurrentTac;
  param_number CurrentCatch;
  param_number TacLeft;
  param_number Mmultiplier;
  param_vector AssessmentErr;
  param_vector ImplementationErr;
  param_vector MeanSel;
  param_number CatchResolution;
  param_vector Likeliweights;
  param_number sigmatotalcatch;
  param_vector LnLikelicomp;
  param_number MaxFishMort;
  param_number largenumber;
  param_number LNMEANEFFORT;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value LnLikely;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void);
 void BackwardHistoricalSimulation();
 void HistoricalSimulation();
 dvariable CalcHCRrefbio(int yr,int refage,int proxy,int nhat,int nweighterryears);
 void BioRatioHockeystick(int yr);
 void SetWeightErrorsHad();
 void SetAssessmentErr();
 void Prognosis();
 void evaluate_the_objective_function();
 void CalcNextYearsN(int year);
 dvariable Catch_loglikeliNocorr();
 void PredictSurveyAbundance1(int surveynr);
 dvariable Survey_loglikeli1(int surveynr);
 dvar_vector Survey_loglikeli2(int surveynr);
 dvariable SSB_Survey_loglikeli(int surveynr);
 dvariable SSB_Recruitment_loglikeli();
 dvariable SSB_Recruitment_loglikeliNocorr();
 dvariable PredictRecruitment(int year);
 dvariable FishmortFromCatchMCMC(const dvariable C,const dvar_vector& Number,const dvar_vector& Wt,const dvar_vector& sel,const dvar_vector& M);
 dvariable FishmortFromCatchMCMC1(const dvariable C,const dvar_vector& Number,const dvar_vector& Wt,const dvar_vector& sel,const dvar_vector& M);
 dvariable FishmortFromCatchOpt(const dvariable C,const dvar_vector& Number,const dvar_vector& Wt,const dvar_vector& sel,const dvar_vector& M);
 void ReadCatchandStockData();
 void ReadCatchParameters();
 void ReadLikelihoodParameters();
 void ReadStockParameters();
 void ReadOutputParameters();
 void SetPredValues();
 void ReadSurveyInfo(adstring parameterfilename,adstring datafilename, adstring residualfilename,int surveynumber,ofstream& surveylogfile);
 void ReadPrognosis();
 void WriteInputDataInMatrixForm();
 void UpdateWeightandMaturityHad(int year);
 void UpdateWeightsAndMaturity();
 void UpdateWeightsAndMaturityWhiteNoise();
 void CalcRefValues(int firstyr,int lastyr,int HistAssessment);
 void PredictSSB(int year);
 dvariable CalcMeanF(dvar_vector Fm);
 dvariable CalcWeightedMeanF(dvar_vector Fm,dvar_vector N);
 void write_mcmc();
 void write_mcmc_all();
 void PredictShorttermSSB(int year,int wmatYear);
 void SingleTriggerHCR(int year);
 void BioRatioHockeystickAdviceYear(int year);
 void ScaleCatches();
 void CalcFishingMortality1a(int year);
 void CalcFishingMortality1b(int year);
 void CalcFishingMortality1c(int year);
 void CalcFishingMortality3(int year);
 void CalcNaturalMortality1(int year);
 dvariable SmoothDamper(dvariable x, dvariable Roof,dvariable Floor);
 dvar_vector wtsel(dvar_vector StockWts,dvariable lebreak);
 dvariable AssYearSSB();

};
#endif
